---
# tasks file for ocp4-provisioner
- name: set hostname
  become: yes
  hostname:
    name: "{{ ocp4_provisioner_hostname }}.{{ domain }}"

- name: update packages
  become: yes
  yum:
    name: '*'
    state: latest
  register: yum_result
  async: 1000
  poll: 30

- name: install jq
  package:
    name: jq
    state: present

- name: check Kernel is the Latest
  shell: if [ $(uname -r) == $(rpm -q kernel | tail -n 1 | sed -e 's/kernel-//g') ] ; then echo no ; else echo reboot; fi
  ignore_errors: true
  register: reboot_hint

- name: restart host to get updated kernel
  become: yes
  shell: sleep 2 && shutdown -r now "Ansible restart triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: yum_result.changed or reboot_hint.stdout.find("reboot") != -1

- name: waiting for Server to come back
  wait_for:
    host: "{{ ocp4_provisioner_public_ip }}"
    state: started
    delay: 10
    connect_timeout: 5
    timeout: 300
    port: 22
  delegate_to: 127.0.0.1
  become: false
  ignore_errors: true

- name: generate ssh key for use across systems
  user:
    name: "{{ ansible_ssh_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa

- name: make ocp4 directory
  file:
    path: "ocp4"
    state: directory
    mode: 0755

- name: download ocp4 Linux installer tarball
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp4_version }}/openshift-install-linux-{{ ocp4_version }}.tar.gz
    dest: ocp4/openshift-install-linux-{{ ocp4_version }}.tar.gz

- name: download ocp4 Linux client tarball
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp4_version }}/openshift-client-linux-{{ ocp4_version }}.tar.gz
    dest: ocp4/openshift-client-linux-{{ ocp4_version }}.tar.gz

- name: unpacking ocp4 Linux installer and client
  unarchive:
    src: ~/ocp4/{{ item }}
    remote_src: true
    dest: ~/ocp4
  loop:
    - 'openshift-install-linux-{{ ocp4_version }}.tar.gz'
    - 'openshift-client-linux-{{ ocp4_version }}.tar.gz'

- name: create a symbolic links for the ocp 4 binaries
  become: yes
  file:
    src: "/home/{{ ansible_ssh_user }}/ocp4/{{ item }}"
    dest: /usr/local/bin/{{ item }}
    owner: root
    group: root
    state: link
  loop:
    - 'oc'
    - 'kubectl'
    - 'openshift-install'
  when: ansible_ssh_user != "root"

- name: create a symbolic links for the ocp 4 binaries (if running as root)
  file:
    src: "/root/ocp4/{{ item }}"
    dest: /usr/local/bin/{{ item }}
    owner: root
    group: root
    state: link
  loop:
    - 'oc'
    - 'kubectl'
    - 'openshift-install'
  when: ansible_ssh_user == "root"
